import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiPredicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.github.difflib.DiffUtils;
import com.github.difflib.UnifiedDiffUtils;
import com.github.difflib.algorithm.DiffException;
import com.github.difflib.algorithm.myers.MyersDiff;
import com.github.difflib.patch.Patch;
import com.github.difflib.patch.PatchFailedException;

/*
 * This Java source file was generated by the Gradl0e 'init' task.
 */
public class Library {
	private static List readByJavaClassic(String fileName) throws IOException {

        List<String> result = new ArrayList<>();
        BufferedReader br = null;

        try {

            br = new BufferedReader(new FileReader(fileName));

            String line;
            while ((line = br.readLine()) != null) {
                result.add(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                br.close();
            }
        }

        return result;
    }
    public static void main(String[] args) throws PatchFailedException {
    	
    	List<String> text1=null;
    	List<String> text2=null;
		try {
			text1 = Library.readByJavaClassic("C:\\Users\\Ramesh\\Desktop\\Diff2html\\1.txt");
			text2 = Library.readByJavaClassic("C:\\Users\\Ramesh\\Desktop\\Diff2html\\2.txt"); 
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} //Arrays.asList("this is a test","a test","test","ywsr");
    	 //Arrays.asList("this is a testfile","a test","test","test");

    	//generating diff information.
    	Patch<String> diff = null;
		try {
			diff = DiffUtils.diff(text1, text2);
		} catch (DiffException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

    	//generating unified diff format
    	List<String> unifiedDiff = UnifiedDiffUtils.generateUnifiedDiff("original-file.txt", "new-file.txt", text1, diff, 0);

    	unifiedDiff.forEach(System.out::println);

    	//importing unified diff format from file or here from memory to a Patch
    	Patch<String> importedPatch = UnifiedDiffUtils.parseUnifiedDiff(unifiedDiff);

    	//apply patch to original list
    	List<String> patchedText = DiffUtils.patch(text1, importedPatch);

    	//System.out.println(patchedText);
    	
    	
    	
//    	List<String> original;
//		try {
//			original = Files.readAllLines(new File("C:\\Users\\Ramesh\\Desktop\\Diff2html\\1.txt").toPath());
//		
//    	List<String> patched;
//		
//			patched = Files.readAllLines(new File("C:\\Users\\Ramesh\\Desktop\\Diff2html\\2.txt").toPath());
//		
//
//    	// At first, parse the unified diff file and get the patch
//    	Patch<String> patch = UnifiedDiffUtils.parseUnifiedDiff(patched);
//
//    	// Then apply the computed patch to the given text
//    	List<String> result = DiffUtils.patch(original, patch);
//
//    	//simple output to console
//    	System.out.println(result);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (PatchFailedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
	}
//    public static <T> Patch<T> diff(List<T> original, List<T> revised,
//    	    BiPredicate<T, T> equalizer) throws DiffException {
//    	    if (equalizer != null) {
//    	        return DiffUtils.diff(original, revised,
//    	        new MyersDiff<>(equalizer));
//    	    }
//    	    return DiffUtils.diff(original, revised, new MyersDiff<>());
//    	}
}
